// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domains "github.com/encilab/dragon-ball/src/domains"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CharacterRepository is an autogenerated mock type for the CharacterRepository type
type CharacterRepository struct {
	mock.Mock
}

// DeleteCharacterInDatabase provides a mock function with given fields: ctx, name
func (_m *CharacterRepository) DeleteCharacterInDatabase(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCharacterInDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCharacterInDatabaseByName provides a mock function with given fields: ctx, name
func (_m *CharacterRepository) GetCharacterInDatabaseByName(ctx context.Context, name string) (domains.Character, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetCharacterInDatabaseByName")
	}

	var r0 domains.Character
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domains.Character, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domains.Character); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(domains.Character)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCharacterInExternalAPIByName provides a mock function with given fields: ctx, name
func (_m *CharacterRepository) GetCharacterInExternalAPIByName(ctx context.Context, name string) (domains.Character, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetCharacterInExternalAPIByName")
	}

	var r0 domains.Character
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domains.Character, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domains.Character); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(domains.Character)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchCharactersInDatabase provides a mock function with given fields: ctx, createdCursor, limit
func (_m *CharacterRepository) SearchCharactersInDatabase(ctx context.Context, createdCursor *time.Time, limit int) ([]domains.Character, error) {
	ret := _m.Called(ctx, createdCursor, limit)

	if len(ret) == 0 {
		panic("no return value specified for SearchCharactersInDatabase")
	}

	var r0 []domains.Character
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Time, int) ([]domains.Character, error)); ok {
		return rf(ctx, createdCursor, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Time, int) []domains.Character); ok {
		r0 = rf(ctx, createdCursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domains.Character)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Time, int) error); ok {
		r1 = rf(ctx, createdCursor, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCharacterRepository creates a new instance of CharacterRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCharacterRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CharacterRepository {
	mock := &CharacterRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
